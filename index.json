{
    "benchmarks": {
        "benchmarks.FullExamples.time_COBAHH_example": {
            "code": "def time_COBAHH_example(self, target):\n    # Parameters\n    area = 20000 * umetre ** 2\n    Cm = (1 * ufarad * cm ** -2) * area\n    gl = (5e-5 * siemens * cm ** -2) * area\n\n    El = -60 * mV\n    EK = -90 * mV\n    ENa = 50 * mV\n    g_na = (100 * msiemens * cm ** -2) * area\n    g_kd = (30 * msiemens * cm ** -2) * area\n    VT = -63 * mV\n    # Time constants\n    taue = 5 * ms\n    taui = 10 * ms\n    # Reversal potentials\n    Ee = 0 * mV\n    Ei = -80 * mV\n    we = 6 * nS  # excitatory synaptic weight\n    wi = 67 * nS  # inhibitory synaptic weight\n\n    # The model\n    eqs = Equations('''\n    dv/dt = (gl*(El-v)+ge*(Ee-v)+gi*(Ei-v)-\n             g_na*(m*m*m)*h*(v-ENa)-\n             g_kd*(n*n*n*n)*(v-EK))/Cm : volt\n    dm/dt = alpha_m*(1-m)-beta_m*m : 1\n    dn/dt = alpha_n*(1-n)-beta_n*n : 1\n    dh/dt = alpha_h*(1-h)-beta_h*h : 1\n    dge/dt = -ge*(1./taue) : siemens\n    dgi/dt = -gi*(1./taui) : siemens\n    alpha_m = 0.32*(mV**-1)*(13*mV-v+VT)/\n             (exp((13*mV-v+VT)/(4*mV))-1.)/ms : Hz\n    beta_m = 0.28*(mV**-1)*(v-VT-40*mV)/\n            (exp((v-VT-40*mV)/(5*mV))-1)/ms : Hz\n    alpha_h = 0.128*exp((17*mV-v+VT)/(18*mV))/ms : Hz\n    beta_h = 4./(1+exp((40*mV-v+VT)/(5*mV)))/ms : Hz\n    alpha_n = 0.032*(mV**-1)*(15*mV-v+VT)/\n             (exp((15*mV-v+VT)/(5*mV))-1.)/ms : Hz\n    beta_n = .5*exp((10*mV-v+VT)/(40*mV))/ms : Hz\n    ''')\n\n    P = NeuronGroup(4000, model=eqs, threshold='v>-20*mV',\n                    refractory=3 * ms,\n                    method='exponential_euler')\n    Pe = P[:3200]\n    Pi = P[3200:]\n    Ce = Synapses(Pe, P, on_pre='ge+=we')\n    Ci = Synapses(Pi, P, on_pre='gi+=wi')\n    Ce.connect(p=0.02)\n    Ci.connect(p=0.02)\n\n    # Initialization\n    P.v = 'El + (randn() * 5 - 5)*mV'\n    P.ge = '(randn() * 1.5 + 4) * 10.*nS'\n    P.gi = '(randn() * 12 + 20) * 10.*nS'\n\n    # Record a few traces\n    trace = StateMonitor(P, 'v', record=[1, 10, 100])\n    run(1 * second, report='text')\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.FullExamples.time_COBAHH_example", 
            "number": 1, 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "COBAHH (compilation+runtime)", 
            "repeat": 0, 
            "timeout": 300, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.FullExamples.time_CUBA_example": {
            "code": "def time_CUBA_example(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n\n    eqs = '''\n    dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n    dge/dt = -ge/taue : volt\n    dgi/dt = -gi/taui : volt\n    '''\n\n    P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                    refractory=5 * ms,\n                    method='linear')\n    P.v = 'Vr + rand() * (Vt - Vr)'\n\n    we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n    wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n    Ce = Synapses(P, P, on_pre='ge += we')\n    Ci = Synapses(P, P, on_pre='gi += wi')\n    Ce.connect('i<3200', p=0.02)\n    Ci.connect('i>=3200', p=0.02)\n\n    s_mon = SpikeMonitor(P)\n\n    run(1 * second)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.FullExamples.time_CUBA_example", 
            "number": 1, 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "CUBA (compilation+runtime)", 
            "repeat": 0, 
            "timeout": 300, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.FullExamples.time_STDP_example": {
            "code": "def time_STDP_example(self, target):\n    N = 1000\n    taum = 10 * ms\n    taupre = 20 * ms\n    taupost = taupre\n    Ee = 0 * mV\n    vt = -54 * mV\n    vr = -60 * mV\n    El = -74 * mV\n    taue = 5 * ms\n    F = 15 * Hz\n    gmax = .01\n    dApre = .01\n    dApost = -dApre * taupre / taupost * 1.05\n    dApost *= gmax\n    dApre *= gmax\n\n    eqs_neurons = '''\n    dv/dt = (ge * (Ee-vr) + El - v) / taum : volt\n    dge/dt = -ge / taue : 1\n    '''\n\n    input = PoissonGroup(N, rates=F)\n    neurons = NeuronGroup(1, eqs_neurons, threshold='v>vt', reset='v = vr',\n                          method='linear')\n    S = Synapses(input, neurons,\n                 '''w : 1\n                    dApre/dt = -Apre / taupre : 1 (event-driven)\n                    dApost/dt = -Apost / taupost : 1 (event-driven)''',\n                 on_pre='''ge += w\n                        Apre += dApre\n                        w = clip(w + Apost, 0, gmax)''',\n                 on_post='''Apost += dApost\n                         w = clip(w + Apre, 0, gmax)''',\n                 )\n    S.connect()\n    S.w = 'rand() * gmax'\n    mon = StateMonitor(S, 'w', record=[0, 1])\n    s_mon = SpikeMonitor(input)\n\n    run(10 * second, report='text')\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.FullExamples.time_STDP_example", 
            "number": 1, 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "STDP example (compilation+runtime)", 
            "repeat": 0, 
            "timeout": 300, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.FullExamples.time_reliability_example": {
            "code": "def time_reliability_example(self, target):\n    N = 25\n    tau_input = 5 * ms\n    input = NeuronGroup(1,\n                        'dx/dt = -x / tau_input + (2 /tau_input)**.5 * xi : 1')\n\n    # The noisy neurons receiving the same input\n    tau = 10 * ms\n    sigma = .015\n    eqs_neurons = '''\n    dx/dt = (0.9 + .5 * I - x) / tau + sigma * (2 / tau)**.5 * xi : 1\n    I : 1 (linked)\n    '''\n    neurons = NeuronGroup(N, model=eqs_neurons, threshold='x > 1',\n                          reset='x = 0', refractory=5 * ms, method='euler')\n    neurons.x = 'rand()'\n    neurons.I = linked_var(input,\n                           'x')  # input.x is continuously fed into neurons.I\n    spikes = SpikeMonitor(neurons)\n\n    run(1 * second)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.FullExamples.time_reliability_example", 
            "number": 1, 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "reliability example (compilation+runtime)", 
            "repeat": 0, 
            "timeout": 300, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.Microbenchmarks.peakmem_statemonitor": {
            "code": "def peakmem_statemonitor(self, target):\n    group = NeuronGroup(1000, 'v : 1')\n    mon = StateMonitor(group, 'v', record=True)\n    run(1*second)\n", 
            "name": "benchmarks.Microbenchmarks.peakmem_statemonitor", 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "StateMonitor (peak memory)", 
            "timeout": 60.0, 
            "type": "peakmemory", 
            "unit": "bytes"
        }, 
        "benchmarks.Microbenchmarks.time_statemonitor": {
            "code": "def time_statemonitor(self, target):\n    group = NeuronGroup(1000, 'v : 1')\n    mon = StateMonitor(group, 'v', record=True)\n    run(1*second)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.Microbenchmarks.time_statemonitor", 
            "number": 1, 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "StateMonitor (compilation+runtime)", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.RuntimeBenchmarks.peakmem_repeated_run": {
            "code": "def peakmem_repeated_run(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n    for _ in range(10):\n        eqs = '''\n                dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n                dge/dt = -ge/taue : volt\n                dgi/dt = -gi/taui : volt\n                '''\n        P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                        refractory=5 * ms, method='linear')\n        P.v = 'Vr + rand() * (Vt - Vr)'\n\n        we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n        wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n        Ce = Synapses(P, P, on_pre='ge += we')\n        Ci = Synapses(P, P, on_pre='gi += wi')\n        Ce.connect('i<3200', p=0.02)\n        Ci.connect('i>=3200', p=0.02)\n        spikes = SpikeMonitor(P)\n        run(1 * second)\n", 
            "name": "benchmarks.RuntimeBenchmarks.peakmem_repeated_run", 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'"
                ]
            ], 
            "pretty_name": "benchmarks.RuntimeBenchmarks.peakmem_repeated_run", 
            "timeout": 300, 
            "type": "peakmemory", 
            "unit": "bytes"
        }, 
        "benchmarks.RuntimeBenchmarks.time_repeated_run": {
            "code": "def time_repeated_run(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n    for _ in range(10):\n        eqs = '''\n                dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n                dge/dt = -ge/taue : volt\n                dgi/dt = -gi/taui : volt\n                '''\n        P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                        refractory=5 * ms, method='linear')\n        P.v = 'Vr + rand() * (Vt - Vr)'\n\n        we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n        wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n        Ce = Synapses(P, P, on_pre='ge += we')\n        Ci = Synapses(P, P, on_pre='gi += wi')\n        Ce.connect('i<3200', p=0.02)\n        Ci.connect('i>=3200', p=0.02)\n        spikes = SpikeMonitor(P)\n        run(1*second)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.RuntimeBenchmarks.time_repeated_run", 
            "number": 0, 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'"
                ]
            ], 
            "pretty_name": "Repeated runs (compilation+runtime)", 
            "repeat": 0, 
            "timeout": 300, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.RuntimeBenchmarks.time_repeated_run_store_restore": {
            "code": "def time_repeated_run_store_restore(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n    eqs = '''\n            dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n            dge/dt = -ge/taue : volt\n            dgi/dt = -gi/taui : volt\n          '''\n    P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                    refractory=5 * ms, method='linear')\n    P.v = 'Vr + rand() * (Vt - Vr)'\n\n    we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n    wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n    Ce = Synapses(P, P, on_pre='ge += we')\n    Ci = Synapses(P, P, on_pre='gi += wi')\n    spikes = SpikeMonitor(P)\n    store()\n    for _ in range(10):\n        restore()\n        Ce.connect('i<3200', p=0.02)\n        Ci.connect('i>=3200', p=0.02)\n        run(1*second)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.RuntimeBenchmarks.time_repeated_run_store_restore", 
            "number": 0, 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'"
                ]
            ], 
            "pretty_name": "Repeated runs with store/restore (compilation+runtime)", 
            "repeat": 0, 
            "timeout": 300, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.RuntimeOnlyExamples.track_COBAHH_example": {
            "code": "def track_COBAHH_example(self, target):\n    '''\n    COBAHH example (only runtime, excluding compilation)\n    '''\n    times = []\n    for _ in range(3):\n        device.reinit()\n        device.activate()\n        start_scope()\n        # Parameters\n        area = 20000 * umetre ** 2\n        Cm = (1 * ufarad * cm ** -2) * area\n        gl = (5e-5 * siemens * cm ** -2) * area\n\n        El = -60 * mV\n        EK = -90 * mV\n        ENa = 50 * mV\n        g_na = (100 * msiemens * cm ** -2) * area\n        g_kd = (30 * msiemens * cm ** -2) * area\n        VT = -63 * mV\n        # Time constants\n        taue = 5 * ms\n        taui = 10 * ms\n        # Reversal potentials\n        Ee = 0 * mV\n        Ei = -80 * mV\n        we = 6 * nS  # excitatory synaptic weight\n        wi = 67 * nS  # inhibitory synaptic weight\n\n        # The model\n        eqs = Equations('''\n        dv/dt = (gl*(El-v)+ge*(Ee-v)+gi*(Ei-v)-\n                 g_na*(m*m*m)*h*(v-ENa)-\n                 g_kd*(n*n*n*n)*(v-EK))/Cm : volt\n        dm/dt = alpha_m*(1-m)-beta_m*m : 1\n        dn/dt = alpha_n*(1-n)-beta_n*n : 1\n        dh/dt = alpha_h*(1-h)-beta_h*h : 1\n        dge/dt = -ge*(1./taue) : siemens\n        dgi/dt = -gi*(1./taui) : siemens\n        alpha_m = 0.32*(mV**-1)*(13*mV-v+VT)/\n                 (exp((13*mV-v+VT)/(4*mV))-1.)/ms : Hz\n        beta_m = 0.28*(mV**-1)*(v-VT-40*mV)/\n                (exp((v-VT-40*mV)/(5*mV))-1)/ms : Hz\n        alpha_h = 0.128*exp((17*mV-v+VT)/(18*mV))/ms : Hz\n        beta_h = 4./(1+exp((40*mV-v+VT)/(5*mV)))/ms : Hz\n        alpha_n = 0.032*(mV**-1)*(15*mV-v+VT)/\n                 (exp((15*mV-v+VT)/(5*mV))-1.)/ms : Hz\n        beta_n = .5*exp((10*mV-v+VT)/(40*mV))/ms : Hz\n        ''')\n\n        P = NeuronGroup(4000, model=eqs, threshold='v>-20*mV',\n                        refractory=3 * ms,\n                        method='exponential_euler')\n        Pe = P[:3200]\n        Pi = P[3200:]\n        Ce = Synapses(Pe, P, on_pre='ge+=we')\n        Ci = Synapses(Pi, P, on_pre='gi+=wi')\n        Ce.connect(p=0.02)\n        Ci.connect(p=0.02)\n\n        # Initialization\n        P.v = 'El + (randn() * 5 - 5)*mV'\n        P.ge = '(randn() * 1.5 + 4) * 10.*nS'\n        P.gi = '(randn() * 12 + 20) * 10.*nS'\n\n        # Record a few traces\n        trace = StateMonitor(P, 'v', record=[1, 10, 100])\n        run(1 * second, report='text')\n        times.append(device._last_run_time)\n    return np.median(times)\n", 
            "name": "benchmarks.RuntimeOnlyExamples.track_COBAHH_example", 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "COBAHH (runtime only)", 
            "timeout": 60.0, 
            "type": "track", 
            "unit": "seconds"
        }, 
        "benchmarks.RuntimeOnlyExamples.track_CUBA_example": {
            "code": "def track_CUBA_example(self, target):\n    '''\n    CUBA example (only runtime, excluding compilation)\n    '''\n    times = []\n    for _ in range(3):\n        device.reinit()\n        device.activate()\n        start_scope()\n        taum = 20 * ms\n        taue = 5 * ms\n        taui = 10 * ms\n        Vt = -50 * mV\n        Vr = -60 * mV\n        El = -49 * mV\n\n        eqs = '''\n        dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n        dge/dt = -ge/taue : volt\n        dgi/dt = -gi/taui : volt\n        '''\n\n        P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                        refractory=5 * ms,\n                        method='linear')\n        P.v = 'Vr + rand() * (Vt - Vr)'\n\n        we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n        wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n        Ce = Synapses(P, P, on_pre='ge += we')\n        Ci = Synapses(P, P, on_pre='gi += wi')\n        Ce.connect('i<3200', p=0.02)\n        Ci.connect('i>=3200', p=0.02)\n\n        s_mon = SpikeMonitor(P)\n\n        run(1 * second)\n        times.append(device._last_run_time)\n    return np.median(times)\n", 
            "name": "benchmarks.RuntimeOnlyExamples.track_CUBA_example", 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "CUBA (runtime only)", 
            "timeout": 60.0, 
            "type": "track", 
            "unit": "seconds"
        }, 
        "benchmarks.RuntimeOnlyExamples.track_STDP_example": {
            "code": "def track_STDP_example(self, target):\n    '''\n    STDP example (only runtime, excluding compilation)\n    '''\n    times = []\n    for _ in range(3):\n        device.reinit()\n        device.activate()\n        start_scope()\n        N = 1000\n        taum = 10 * ms\n        taupre = 20 * ms\n        taupost = taupre\n        Ee = 0 * mV\n        vt = -54 * mV\n        vr = -60 * mV\n        El = -74 * mV\n        taue = 5 * ms\n        F = 15 * Hz\n        gmax = .01\n        dApre = .01\n        dApost = -dApre * taupre / taupost * 1.05\n        dApost *= gmax\n        dApre *= gmax\n\n        eqs_neurons = '''\n        dv/dt = (ge * (Ee-vr) + El - v) / taum : volt\n        dge/dt = -ge / taue : 1\n        '''\n\n        input = PoissonGroup(N, rates=F)\n        neurons = NeuronGroup(1, eqs_neurons, threshold='v>vt',\n                              reset='v = vr',\n                              method='linear')\n        S = Synapses(input, neurons,\n                     '''w : 1\n                        dApre/dt = -Apre / taupre : 1 (event-driven)\n                        dApost/dt = -Apost / taupost : 1 (event-driven)''',\n                     on_pre='''ge += w\n                            Apre += dApre\n                            w = clip(w + Apost, 0, gmax)''',\n                     on_post='''Apost += dApost\n                             w = clip(w + Apre, 0, gmax)''',\n                     )\n        S.connect()\n        S.w = 'rand() * gmax'\n        mon = StateMonitor(S, 'w', record=[0, 1])\n        s_mon = SpikeMonitor(input)\n\n        run(1 * second, report='text')\n        times.append(device._last_run_time)\n    return np.median(times)\n", 
            "name": "benchmarks.RuntimeOnlyExamples.track_STDP_example", 
            "param_names": [
                "target"
            ], 
            "params": [
                [
                    "'numpy'", 
                    "'cython'", 
                    "'cpp_standalone'"
                ]
            ], 
            "pretty_name": "STDP example (runtime only)", 
            "timeout": 60.0, 
            "type": "track", 
            "unit": "seconds"
        }, 
        "benchmarks.UnitBenchmarks.time_calculations_with_units": {
            "code": "def time_calculations_with_units(self):\n    rmse = np.sqrt(np.mean(self.ar_with_units**2))\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.UnitBenchmarks.time_calculations_with_units", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "Calulation with quantities", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.UnitBenchmarks.time_unit_removal_by_division": {
            "code": "def time_unit_removal_by_division(self):\n    no_units = self.ar_with_units / mV\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.UnitBenchmarks.time_unit_removal_by_division", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "Unit removal by division", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.UnitBenchmarks.time_units_to_string": {
            "code": "def time_units_to_string(self):\n    str(self.ar_with_units)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.UnitBenchmarks.time_units_to_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "Conversion quantity->string", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }
    }, 
    "graph_param_list": [
        {
            "arch": "x86_64", 
            "branch": "master", 
            "cpu": "Intel(R) Xeon(R) CPU E5-1630 v3 @ 3.70GHz", 
            "cython": "", 
            "machine": "vuvuzela", 
            "os": "Linux 4.4.0-119-generic", 
            "python": "2.7", 
            "ram": "16354876"
        }, 
        {
            "arch": "x86_64", 
            "branch": "master", 
            "cpu": "Intel(R) Xeon(R) CPU E5-1630 v3 @ 3.70GHz", 
            "cython": "", 
            "machine": "vuvuzela", 
            "os": "Linux 4.4.0-119-generic", 
            "python": "3.6", 
            "ram": "16354876"
        }
    ], 
    "hash_length": 8, 
    "machines": {
        "vuvuzela": {
            "arch": "x86_64", 
            "cpu": "Intel(R) Xeon(R) CPU E5-1630 v3 @ 3.70GHz", 
            "machine": "vuvuzela", 
            "os": "Linux 4.4.0-119-generic", 
            "ram": "16354876", 
            "version": 1
        }
    }, 
    "pages": [
        [
            "", 
            "Grid view", 
            "Display as a agrid"
        ], 
        [
            "summarylist", 
            "List view", 
            "Display as a list"
        ], 
        [
            "regressions", 
            "Show regressions", 
            "Display information about recent regressions"
        ]
    ], 
    "params": {
        "arch": [
            "x86_64"
        ], 
        "branch": [
            "master"
        ], 
        "cpu": [
            "Intel(R) Xeon(R) CPU E5-1630 v3 @ 3.70GHz"
        ], 
        "cython": [
            ""
        ], 
        "machine": [
            "vuvuzela"
        ], 
        "os": [
            "Linux 4.4.0-119-generic"
        ], 
        "python": [
            "2.7", 
            "3.6"
        ], 
        "ram": [
            "16354876"
        ]
    }, 
    "project": "brian2", 
    "project_url": "http://briansimulator.org/", 
    "revision_to_date": {
        "1211": 1381669715000, 
        "1214": 1381672236000, 
        "1215": 1381672810000, 
        "1217": 1381674351000, 
        "1220": 1381678829000, 
        "1294": 1382970284000, 
        "1371": 1387366179000, 
        "1379": 1387381558000, 
        "1603": 1394550224000, 
        "2180": 1415036406000, 
        "2426": 1426094913000, 
        "2584": 1430413791000, 
        "2753": 1437121313000, 
        "3562": 1460995244000, 
        "3595": 1462376770000, 
        "3743": 1465998023000, 
        "3977": 1474024359000, 
        "3984": 1478266985000, 
        "3989": 1478768388000, 
        "3991": 1479031241000, 
        "4009": 1479477372000, 
        "4010": 1479490714000, 
        "4011": 1479821295000, 
        "4018": 1480100580000, 
        "4033": 1484066446000, 
        "4034": 1484067521000, 
        "4056": 1484662307000, 
        "4064": 1485768296000, 
        "4065": 1485768561000, 
        "4071": 1486576359000, 
        "4073": 1486633595000, 
        "4075": 1486645839000, 
        "4080": 1486991132000, 
        "4081": 1486993298000, 
        "4092": 1487954567000, 
        "4113": 1489009261000, 
        "4162": 1491058175000, 
        "4166": 1491297818000, 
        "4201": 1492000835000, 
        "4238": 1493898192000, 
        "4239": 1493989754000, 
        "4244": 1495282112000, 
        "4268": 1496394445000, 
        "4282": 1496844609000, 
        "4285": 1496850505000, 
        "4287": 1496853258000, 
        "4288": 1496853435000, 
        "4291": 1496938231000, 
        "4292": 1496939634000, 
        "4294": 1496939790000, 
        "4295": 1496996915000, 
        "4329": 1498445607000, 
        "4476": 1503103310000, 
        "4482": 1503057958000, 
        "4492": 1503481907000, 
        "4546": 1504888366000, 
        "4547": 1504888614000, 
        "4564": 1505894494000, 
        "4568": 1505897907000, 
        "4574": 1506073360000, 
        "4581": 1506685740000, 
        "4593": 1507279277000, 
        "4614": 1508260511000, 
        "4631": 1508859453000, 
        "4633": 1508938831000, 
        "4642": 1509118263000, 
        "4646": 1509370490000, 
        "4648": 1509370623000, 
        "4649": 1509439287000, 
        "4653": 1509701752000, 
        "4655": 1509704073000, 
        "4663": 1510132185000, 
        "4664": 1510132199000, 
        "4666": 1511864485000, 
        "4670": 1512986168000, 
        "4675": 1513594750000, 
        "4676": 1513691926000, 
        "4694": 1516906459000, 
        "4699": 1517243922000, 
        "4700": 1517826912000, 
        "4707": 1520848857000, 
        "4710": 1520011122000, 
        "4728": 1522077065000, 
        "4742": 1522938517000, 
        "4747": 1523265223000, 
        "4757": 1523897706000, 
        "4766": 1524496453000, 
        "4799": 1527082886000, 
        "4813": 1527253480000, 
        "4839": 1527688486000, 
        "4843": 1527688563000, 
        "4847": 1527695005000, 
        "4851": 1527696982000, 
        "4853": 1527699944000, 
        "4855": 1527757198000, 
        "4859": 1527840313000, 
        "4860": 1527868164000, 
        "4864": 1528279103000, 
        "4866": 1528363989000, 
        "4904": 1529503201000, 
        "4907": 1530533130000, 
        "4908": 1530533236000, 
        "4967": 1534515177000, 
        "4969": 1534853981000, 
        "4970": 1534867779000, 
        "4973": 1535118634000, 
        "5001": 1535471482000, 
        "5007": 1535547348000, 
        "5010": 1535557125000, 
        "5034": 1537286062000, 
        "5044": 1538990245000
    }, 
    "revision_to_hash": {
        "1211": "30176071c11821cb9f131a040500272aa44e5059", 
        "1214": "dfd7cb064f0825ddea0806447d2781a43f84618b", 
        "1215": "e35ed64f4124380028ef11c48342b024d30e9e17", 
        "1217": "b89a329a49b1031cd93724070a518d1d81c23612", 
        "1220": "28541c8ac2650cbcb7395b79c9113d5a82f2df09", 
        "1294": "b6f03b33470f9301547b7acb9fe44a082e01c84a", 
        "1371": "1ae18bad852dbe478d30bce540b960c6e058e33b", 
        "1379": "07c43b8ac7d71313a4d266f336838a1d809495f2", 
        "1603": "5f150d2e00bc70c0a88bf0e0f1f6a0dc7767ee73", 
        "2180": "8b9b5eab658eba4a590bc78cfafeb66844befde5", 
        "2426": "8fea4aad10644535a0f444d57c55a7ddfbe70dbe", 
        "2584": "3f3926ccd1e25c764a797fd5a5ac78440faa448b", 
        "2753": "7d435c7e76a08c0c810793758a95f7379c36bea5", 
        "3562": "0b12df6fee3a3b026c69fff1b2fef9fcbed4105d", 
        "3595": "743402c28ea373b05f07010d3761581481e65a3c", 
        "3743": "53a4c6017ae0388af674619da00d5c57834c5173", 
        "3977": "4c4a66c0224d1afb14adc30e518097ef2c8e7e6e", 
        "3984": "f1cdad8c2133beae3a03c92a98d3cfc21b87c4fb", 
        "3989": "97b1b5101b1240dcc15eb3bb0cd43687fc3908d7", 
        "3991": "5710df1fd46bd0a50251bb696762d88ea488afc1", 
        "4009": "05bba8df77f47ddb5a87f40ec080f102d0547635", 
        "4010": "3eb912ce6d93fe973a54e5e57e7777dfb4a4d719", 
        "4011": "6fba8171e940fff59f77a1d403ebeecf30e8dcef", 
        "4018": "1c7e3baf8f3cf80d0e4072f67c320d02827e4982", 
        "4033": "191c2d7970df8be676b312463c970e2d22e93f7b", 
        "4034": "fadc6a0aeb90d1b4d343470628457d8561536f67", 
        "4056": "d0f2f125d991d522e8e85ab7bd5339e13e6f81ff", 
        "4064": "9cbf94284a54a9ba0aa3f871c246b8772775a3c8", 
        "4065": "6f78ead7022e612a3dcba765c48a0b2231a27c88", 
        "4071": "95866fa281b0e8697a55a49bd30fc8bc1b57a1ea", 
        "4073": "72ac8fd5810aa52f22b75a62f0156dc10b17fa6a", 
        "4075": "6eccd49c4d0c453b56f76bc71de3ca0df3359852", 
        "4080": "58ca1dc4604ba663f51d3bbc9e8670945d22e8ea", 
        "4081": "45ef48f0618bc31454ace13f32a23e8e0f34c254", 
        "4092": "b04e32ed91c2eb2bb6e729f28f12697a1349ced2", 
        "4113": "be188cc0b9d95b1dffeda775dc3a5728fc59779d", 
        "4162": "c56783a7cb3634872ab444b2e11f9cc9e42ae9cb", 
        "4166": "1a5c006eb1d27f9755614f7433cff4640246bdbd", 
        "4201": "9501e377c6e9aec2eb970b45968c4f47c62cb37f", 
        "4238": "b329c0c060d5b98cdc9d188fd6bc1a453539bfb8", 
        "4239": "d39b323cf16296b94646ecb055e12160416a826d", 
        "4244": "5fd069ec33ea7625618424fd0a6707d4f91086cb", 
        "4268": "87c586a626a86f71e05f13be38b7b2862e4c0294", 
        "4282": "52592fc21fb90924924be56465abc1d56917768f", 
        "4285": "14c50a9719026518f10faa4afa0caaf76726e3e6", 
        "4287": "73577f2cd8ce421048573da23639219a413da602", 
        "4288": "3a4c5e02e88850c8fa9db9eac697cfde2dab09e9", 
        "4291": "320c67bb31c012584a4239c2ecd12626f3ba3a67", 
        "4292": "2121b7885de9bdfd24a15e5c70177a6a209033db", 
        "4294": "5311c8f2a76ee35ac8935af190b96efd75144b1b", 
        "4295": "071a7e9d568d1b2b953f5fad790dfd602f448d38", 
        "4329": "d56829224c81435137412e56acbd0d3338063676", 
        "4476": "27c966d0e4722a170a5fcbca8e3e73cb50505c67", 
        "4482": "2562d4cc67625de5c34e2453d8b4adebae977621", 
        "4492": "c151f1960e3e7f3b3b6e61baa1f1427b56b430ee", 
        "4546": "fcfe532e029fdbb0e36464d126f7f8c49fd8f166", 
        "4547": "4ef5441960605b805970eb01c99224fd4a7754a1", 
        "4564": "adbe1a5243013d95cc5c2afe5f8ae305dfb42366", 
        "4568": "d31834bc82194e1f0a8a0193da11a414d6b2e8d6", 
        "4574": "a13a6c3bdb3bc65657ddab501e0cec6a7e3d4999", 
        "4581": "cd6aefe1035a9415f5e9700fc06e448334daf67f", 
        "4593": "6ae13433af2727ea848134e21558826c78b06d10", 
        "4614": "a2447711f6b04a70981261402d4be280fa95482d", 
        "4631": "7d5d38cf7c77e4745a3864064c6bb1248350f918", 
        "4633": "7acf4111a6d2b0226f51e0a42b048456ceef3cf5", 
        "4642": "9010eec41dfda15db60fb4088ee20b589c266ed5", 
        "4646": "d24725ed2fa4e62adffe36b276afdb820f20ca59", 
        "4648": "df52e10703da5cd6d1f11263b79e092d55391592", 
        "4649": "d02bc81b48e23eb005879534860edda73beff293", 
        "4653": "1a9832ecee10c17cd0c4a1340884ca444f485bef", 
        "4655": "15817a44b7f7095a24435947042e1fcb275c36f1", 
        "4663": "db18030bfcada740e7b7949d319d45194c7a8e50", 
        "4664": "b61baf834b5aafd31dd58ad60de7cae2be79ec2f", 
        "4666": "7420849f85e76d8d4c1fda51b502d1a757f5fb01", 
        "4670": "c02d40c3fafb52b7e59e3bf999ea1fc63fd90eb4", 
        "4675": "8d730fc8c7366e4e49b2f13f9cdb7f5f8efbf24a", 
        "4676": "849926b76568c0a984412f47ecc42a1b0b7d6f31", 
        "4694": "89dc82b6b500f53c344f90cf0237be38675543f0", 
        "4699": "41ed23c0ab3004abce8fb9028e656ba22eeb24e9", 
        "4700": "dc0955b402cd6d4e4a77b11b76ab59d3280e95ae", 
        "4707": "4e9574d524062f9fdb064e6e1238405d9bfd90af", 
        "4710": "cc2e3c92838b3657c8bc19d60e0a9bfcb3afd90b", 
        "4728": "231518406f8f1b162f837f2362f46267aa2cd74b", 
        "4742": "6d8fea0f2d4aeb4378d08c4597c092796fb45207", 
        "4747": "1e21d5fd1df38d3279ccdd1a1b39b5d90afa207f", 
        "4757": "1fd324d22fc6b46beaf22a5368bba16965bb3aa1", 
        "4766": "122478aa9d1fc427bf2e99dbace5a31729e823d3", 
        "4799": "17cb5033a3329c3f779a8a92ac37afa5d994bae4", 
        "4813": "5493ebeacb34a5d74da0a13d253c338229cab40e", 
        "4839": "41bb0ffb0a3b291a85a3371e325c078669458339", 
        "4843": "78780c623ae84aa304d477017abe155061066279", 
        "4847": "9f2cade032b747057f8498cd823ef6f3d467c5aa", 
        "4851": "6c8b404062c6591e3a32764e7dfc901a9cbb39bf", 
        "4853": "19854f041f518b4e549f9591703f5300ca9927f5", 
        "4855": "43860fa3dc674c99ba2bf1eff9f3d234b1d23c2c", 
        "4859": "b4c630c5c3dc667e4279598416d740467aadec2c", 
        "4860": "62b397fbb1c87caf762b4ec50849a665bbe46d0d", 
        "4864": "3b490ffc85185f8861026aa98ab3cd6487f960d3", 
        "4866": "2b8e459798bd84be1c01e707d74993f2f260b5ce", 
        "4904": "cde38b623c27d6dc0e6fd0cb168081706642c47b", 
        "4907": "2f1e05d0342c510ebe65088f7f097edcfe67216c", 
        "4908": "320a5f6b36e2aa5dfe7e6b22bd46c3652ad9cc99", 
        "4967": "3d334a50a28c479791a01ecc8107a87a1168337d", 
        "4969": "76933f91a147413f9b129c30d2b836fe6cce5da8", 
        "4970": "edfacc8b39750e0e71838bd1317c0ed39fee3c22", 
        "4973": "6c50e3a22d0e83a2b75c5bcf6f7c1d889311fca1", 
        "5001": "eb020a34f9f1f63d4b6b61f366733499c4498475", 
        "5007": "94f73f8c45af86dec8480a6835b37f200dd0941b", 
        "5010": "6a40a1e29c4ea49600f6a5eb90d340f5201b3579", 
        "5034": "9baa0a1cdb853dd8aee5c61f30864ad5a51815a8", 
        "5044": "d71a9993f8c7656d7afb5ad24cde6b705e9ae82f"
    }, 
    "show_commit_url": "http://github.com/brian-team/brian2/commit/", 
    "tags": {
        "2.0": 3977, 
        "2.0.1": 4010, 
        "2.0.2": 4288, 
        "2.0.2.1": 4294, 
        "2.0a": 1211, 
        "2.0a1": 1214, 
        "2.0a2": 1215, 
        "2.0a3": 1217, 
        "2.0a4": 1220, 
        "2.0a5": 1294, 
        "2.0a6": 1371, 
        "2.0a7": 1379, 
        "2.0a8": 1603, 
        "2.0b2": 2426, 
        "2.0b3": 2584, 
        "2.0b4": 2753, 
        "2.0beta": 2180, 
        "2.0rc": 3562, 
        "2.0rc1": 3595, 
        "2.0rc3": 3743, 
        "2.1": 4648, 
        "2.1.1": 4655, 
        "2.1.2": 4664, 
        "2.1.3": 4853, 
        "2.1.3.1": 4866, 
        "2.2": 5044
    }
}