{
    "benchmarks.FullExamples.time_COBAHH_example": {
        "code": "def time_COBAHH_example(self, target):\n    # Parameters\n    area = 20000 * umetre ** 2\n    Cm = (1 * ufarad * cm ** -2) * area\n    gl = (5e-5 * siemens * cm ** -2) * area\n\n    El = -60 * mV\n    EK = -90 * mV\n    ENa = 50 * mV\n    g_na = (100 * msiemens * cm ** -2) * area\n    g_kd = (30 * msiemens * cm ** -2) * area\n    VT = -63 * mV\n    # Time constants\n    taue = 5 * ms\n    taui = 10 * ms\n    # Reversal potentials\n    Ee = 0 * mV\n    Ei = -80 * mV\n    we = 6 * nS  # excitatory synaptic weight\n    wi = 67 * nS  # inhibitory synaptic weight\n\n    # The model\n    eqs = Equations('''\n    dv/dt = (gl*(El-v)+ge*(Ee-v)+gi*(Ei-v)-\n             g_na*(m*m*m)*h*(v-ENa)-\n             g_kd*(n*n*n*n)*(v-EK))/Cm : volt\n    dm/dt = alpha_m*(1-m)-beta_m*m : 1\n    dn/dt = alpha_n*(1-n)-beta_n*n : 1\n    dh/dt = alpha_h*(1-h)-beta_h*h : 1\n    dge/dt = -ge*(1./taue) : siemens\n    dgi/dt = -gi*(1./taui) : siemens\n    alpha_m = 0.32*(mV**-1)*(13*mV-v+VT)/\n             (exp((13*mV-v+VT)/(4*mV))-1.)/ms : Hz\n    beta_m = 0.28*(mV**-1)*(v-VT-40*mV)/\n            (exp((v-VT-40*mV)/(5*mV))-1)/ms : Hz\n    alpha_h = 0.128*exp((17*mV-v+VT)/(18*mV))/ms : Hz\n    beta_h = 4./(1+exp((40*mV-v+VT)/(5*mV)))/ms : Hz\n    alpha_n = 0.032*(mV**-1)*(15*mV-v+VT)/\n             (exp((15*mV-v+VT)/(5*mV))-1.)/ms : Hz\n    beta_n = .5*exp((10*mV-v+VT)/(40*mV))/ms : Hz\n    ''')\n\n    P = NeuronGroup(4000, model=eqs, threshold='v>-20*mV',\n                    refractory=3 * ms,\n                    method='exponential_euler')\n    Pe = P[:3200]\n    Pi = P[3200:]\n    Ce = Synapses(Pe, P, on_pre='ge+=we')\n    Ci = Synapses(Pi, P, on_pre='gi+=wi')\n    Ce.connect(p=0.02)\n    Ci.connect(p=0.02)\n\n    # Initialization\n    P.v = 'El + (randn() * 5 - 5)*mV'\n    P.ge = '(randn() * 1.5 + 4) * 10.*nS'\n    P.gi = '(randn() * 12 + 20) * 10.*nS'\n\n    # Record a few traces\n    trace = StateMonitor(P, 'v', record=[1, 10, 100])\n    run(1 * second, report='text')\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.FullExamples.time_COBAHH_example", 
        "number": 1, 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'", 
                "'cpp_standalone'"
            ]
        ], 
        "pretty_name": "benchmarks.FullExamples.time_COBAHH_example", 
        "repeat": 0, 
        "timeout": 300, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.FullExamples.time_CUBA_example": {
        "code": "def time_CUBA_example(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n\n    eqs = '''\n    dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n    dge/dt = -ge/taue : volt\n    dgi/dt = -gi/taui : volt\n    '''\n\n    P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                    refractory=5 * ms,\n                    method='linear')\n    P.v = 'Vr + rand() * (Vt - Vr)'\n\n    we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n    wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n    Ce = Synapses(P, P, on_pre='ge += we')\n    Ci = Synapses(P, P, on_pre='gi += wi')\n    Ce.connect('i<3200', p=0.02)\n    Ci.connect('i>=3200', p=0.02)\n\n    s_mon = SpikeMonitor(P)\n\n    run(1 * second)\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.FullExamples.time_CUBA_example", 
        "number": 1, 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'", 
                "'cpp_standalone'"
            ]
        ], 
        "pretty_name": "benchmarks.FullExamples.time_CUBA_example", 
        "repeat": 0, 
        "timeout": 300, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.FullExamples.time_STDP_example": {
        "code": "def time_STDP_example(self, target):\n    N = 1000\n    taum = 10 * ms\n    taupre = 20 * ms\n    taupost = taupre\n    Ee = 0 * mV\n    vt = -54 * mV\n    vr = -60 * mV\n    El = -74 * mV\n    taue = 5 * ms\n    F = 15 * Hz\n    gmax = .01\n    dApre = .01\n    dApost = -dApre * taupre / taupost * 1.05\n    dApost *= gmax\n    dApre *= gmax\n\n    eqs_neurons = '''\n    dv/dt = (ge * (Ee-vr) + El - v) / taum : volt\n    dge/dt = -ge / taue : 1\n    '''\n\n    input = PoissonGroup(N, rates=F)\n    neurons = NeuronGroup(1, eqs_neurons, threshold='v>vt', reset='v = vr',\n                          method='linear')\n    S = Synapses(input, neurons,\n                 '''w : 1\n                    dApre/dt = -Apre / taupre : 1 (event-driven)\n                    dApost/dt = -Apost / taupost : 1 (event-driven)''',\n                 on_pre='''ge += w\n                        Apre += dApre\n                        w = clip(w + Apost, 0, gmax)''',\n                 on_post='''Apost += dApost\n                         w = clip(w + Apre, 0, gmax)''',\n                 )\n    S.connect()\n    S.w = 'rand() * gmax'\n    mon = StateMonitor(S, 'w', record=[0, 1])\n    s_mon = SpikeMonitor(input)\n\n    run(10 * second, report='text')\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.FullExamples.time_STDP_example", 
        "number": 1, 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'", 
                "'cpp_standalone'"
            ]
        ], 
        "pretty_name": "benchmarks.FullExamples.time_STDP_example", 
        "repeat": 0, 
        "timeout": 300, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.FullExamples.time_reliability_example": {
        "code": "def time_reliability_example(self, target):\n    N = 25\n    tau_input = 5 * ms\n    input = NeuronGroup(1,\n                        'dx/dt = -x / tau_input + (2 /tau_input)**.5 * xi : 1')\n\n    # The noisy neurons receiving the same input\n    tau = 10 * ms\n    sigma = .015\n    eqs_neurons = '''\n    dx/dt = (0.9 + .5 * I - x) / tau + sigma * (2 / tau)**.5 * xi : 1\n    I : 1 (linked)\n    '''\n    neurons = NeuronGroup(N, model=eqs_neurons, threshold='x > 1',\n                          reset='x = 0', refractory=5 * ms, method='euler')\n    neurons.x = 'rand()'\n    neurons.I = linked_var(input,\n                           'x')  # input.x is continuously fed into neurons.I\n    spikes = SpikeMonitor(neurons)\n\n    run(1 * second)\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.FullExamples.time_reliability_example", 
        "number": 1, 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'", 
                "'cpp_standalone'"
            ]
        ], 
        "pretty_name": "benchmarks.FullExamples.time_reliability_example", 
        "repeat": 0, 
        "timeout": 300, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.Microbenchmarks.peakmem_statemonitor": {
        "code": "def peakmem_statemonitor(self, target):\n    group = NeuronGroup(1000, 'v : 1')\n    mon = StateMonitor(group, 'v', record=True)\n    run(1*second)\n", 
        "name": "benchmarks.Microbenchmarks.peakmem_statemonitor", 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'", 
                "'cpp_standalone'"
            ]
        ], 
        "pretty_name": "benchmarks.Microbenchmarks.peakmem_statemonitor", 
        "timeout": 60.0, 
        "type": "peakmemory", 
        "unit": "bytes"
    }, 
    "benchmarks.Microbenchmarks.time_statemonitor": {
        "code": "def time_statemonitor(self, target):\n    group = NeuronGroup(1000, 'v : 1')\n    mon = StateMonitor(group, 'v', record=True)\n    run(1*second)\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.Microbenchmarks.time_statemonitor", 
        "number": 1, 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'", 
                "'cpp_standalone'"
            ]
        ], 
        "pretty_name": "benchmarks.Microbenchmarks.time_statemonitor", 
        "repeat": 0, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.RuntimeBenchmarks.peakmem_repeated_run": {
        "code": "def peakmem_repeated_run(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n    for _ in range(10):\n        eqs = '''\n                dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n                dge/dt = -ge/taue : volt\n                dgi/dt = -gi/taui : volt\n                '''\n        P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                        refractory=5 * ms, method='linear')\n        P.v = 'Vr + rand() * (Vt - Vr)'\n\n        we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n        wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n        Ce = Synapses(P, P, on_pre='ge += we')\n        Ci = Synapses(P, P, on_pre='gi += wi')\n        Ce.connect('i<3200', p=0.02)\n        Ci.connect('i>=3200', p=0.02)\n        spikes = SpikeMonitor(P)\n        run(1 * second)\n", 
        "name": "benchmarks.RuntimeBenchmarks.peakmem_repeated_run", 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'"
            ]
        ], 
        "pretty_name": "benchmarks.RuntimeBenchmarks.peakmem_repeated_run", 
        "timeout": 300, 
        "type": "peakmemory", 
        "unit": "bytes"
    }, 
    "benchmarks.RuntimeBenchmarks.time_repeated_run": {
        "code": "def time_repeated_run(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n    for _ in range(10):\n        eqs = '''\n                dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n                dge/dt = -ge/taue : volt\n                dgi/dt = -gi/taui : volt\n                '''\n        P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                        refractory=5 * ms, method='linear')\n        P.v = 'Vr + rand() * (Vt - Vr)'\n\n        we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n        wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n        Ce = Synapses(P, P, on_pre='ge += we')\n        Ci = Synapses(P, P, on_pre='gi += wi')\n        Ce.connect('i<3200', p=0.02)\n        Ci.connect('i>=3200', p=0.02)\n        spikes = SpikeMonitor(P)\n        run(1*second)\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.RuntimeBenchmarks.time_repeated_run", 
        "number": 0, 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'"
            ]
        ], 
        "pretty_name": "benchmarks.RuntimeBenchmarks.time_repeated_run", 
        "repeat": 0, 
        "timeout": 300, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.RuntimeBenchmarks.time_repeated_run_store_restore": {
        "code": "def time_repeated_run_store_restore(self, target):\n    taum = 20 * ms\n    taue = 5 * ms\n    taui = 10 * ms\n    Vt = -50 * mV\n    Vr = -60 * mV\n    El = -49 * mV\n    eqs = '''\n            dv/dt  = (ge+gi-(v-El))/taum : volt (unless refractory)\n            dge/dt = -ge/taue : volt\n            dgi/dt = -gi/taui : volt\n          '''\n    P = NeuronGroup(4000, eqs, threshold='v>Vt', reset='v = Vr',\n                    refractory=5 * ms, method='linear')\n    P.v = 'Vr + rand() * (Vt - Vr)'\n\n    we = (60 * 0.27 / 10) * mV  # excitatory synaptic weight (voltage)\n    wi = (-20 * 4.5 / 10) * mV  # inhibitory synaptic weight\n    Ce = Synapses(P, P, on_pre='ge += we')\n    Ci = Synapses(P, P, on_pre='gi += wi')\n    spikes = SpikeMonitor(P)\n    store()\n    for _ in range(10):\n        restore()\n        Ce.connect('i<3200', p=0.02)\n        Ci.connect('i>=3200', p=0.02)\n        run(1*second)\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.RuntimeBenchmarks.time_repeated_run_store_restore", 
        "number": 0, 
        "param_names": [
            "target"
        ], 
        "params": [
            [
                "'numpy'", 
                "'cython'"
            ]
        ], 
        "pretty_name": "benchmarks.RuntimeBenchmarks.time_repeated_run_store_restore", 
        "repeat": 0, 
        "timeout": 300, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.UnitBenchmarks.time_calculations_with_units": {
        "code": "def time_calculations_with_units(self):\n    rmse = np.sqrt(np.mean(self.ar_with_units**2))\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.UnitBenchmarks.time_calculations_with_units", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "pretty_name": "benchmarks.UnitBenchmarks.time_calculations_with_units", 
        "repeat": 0, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.UnitBenchmarks.time_unit_removal_by_division": {
        "code": "def time_unit_removal_by_division(self):\n    no_units = self.ar_with_units / mV\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.UnitBenchmarks.time_unit_removal_by_division", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "pretty_name": "benchmarks.UnitBenchmarks.time_unit_removal_by_division", 
        "repeat": 0, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "benchmarks.UnitBenchmarks.time_units_to_string": {
        "code": "def time_units_to_string(self):\n    str(self.ar_with_units)\n", 
        "goal_time": 2.0, 
        "name": "benchmarks.UnitBenchmarks.time_units_to_string", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "pretty_name": "benchmarks.UnitBenchmarks.time_units_to_string", 
        "repeat": 0, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "version": 1
}